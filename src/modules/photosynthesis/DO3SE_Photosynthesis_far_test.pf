  @test
  subroutine get_co2_concentration_in_stomata_test()

    use funit

    ! use DO3SE_Photosynthesis_ml
    use DO3SE_Photosynthesis_far_ml
    use DO3SE_ConfigTypes_ml

    implicit none

    real, dimension(366) :: fO3_h_1_hist
    real, dimension(366) :: fO3_d_hist
    real, dimension(366) :: daily_thermal_temperatures

    real :: g_sto                           !two sided stomatal conduct.,vapour [micro mol/(m^2s)]
    real :: A_n                             !netto assimilation rate            [micro mol/(m^2*s)]
    real :: A_c                             !Rub. activity. lim. ass. rate      [micro mol/(m^2*s)]
    real :: A_j                             !electr. transp. lim. ass. rate     [micro mol/(m^2*s)]
    real :: A_p
    real :: O3up
    real :: fO3_d
    real :: fO3_h



    real :: t_lma = 1.0
    real :: t_lse = 1.0
    real :: Gamma_star = 1.0


    ! ================ get_co2_concentration_in_stomata TEST ==================
    call get_co2_concentration_in_stomata(&
    c_i_start=0.0, &
    c_a=1.0, &
    e_a=1.0, &
    g_bl=1.0, &
    g_sto_0=1.0, &
    m=1.0, &
    D_0=1.0, &
    O3=1.0, &
    dd=1, &
    O3up_acc_out=1.0, &
    e_sat_i=1.0, &
    fO3_h_1_hist=fO3_h_1_hist, &
    fO3_d_hist=fO3_d_hist, &
    V_cmax=1.0, &
    J=1.0, &
    Gamma=1.0, &
    R_d=1.0, &
    K_C=1.0, &
    K_O=1.0, &
    t_l=1.0, &
    t_lem=1.0, &
    t_lep=1.0, & ! << Inputs
    t_lse=t_lse, &
    t_lma=t_lma, &
    Gamma_star=Gamma_star, & ! << Inouts

    g_sto=g_sto, &
    A_n=A_n, &
    A_c=A_c, &
    A_j=A_j, &
    A_p=A_p, &
    O3up=O3up, &
    fO3_d=fO3_d, &
    fO3_h=fO3_h)

    ! Check variable outputs
    ! TODO: Above variables need sanity checking to see what normal outputs should be
    @assertEqual(-729925.938, g_sto, 'far-get_co2-g_sto')
    @assertEqual(-0.750000715, A_n, 'get_co2-A_n')
    @assertEqual(0.999793708, A_c, 'get_co2-A_c')
    @assertEqual(0.249999270, A_j, 'get_co2-A_j')
    @assertEqual(0.500000000, A_p, 'get_co2-A_p')
    @assertEqual(-678831.125, O3up, 'get_co2-O3up')
    @assertEqual(1.0000000, fO3_d, 'get_co2-fO3_d')
    @assertEqual(1.0000000, fO3_h, 'get_co2-fO3_h')
  end subroutine get_co2_concentration_in_stomata_test

  @test
  subroutine far_test()

    use funit

    ! use DO3SE_Photosynthesis_ml
    use DO3SE_Photosynthesis_far_ml
    use DO3SE_ConfigTypes_ml

    implicit none

    ! INPUTS
    type(pngstoconfig_t) :: pgc   !< Photosynthesis gsto parameters
    type(season_t) :: season
    real :: Tleaf_C = 1.0       !< Leaf temperature (degrees C)
    real :: c_a = 1.0           !< CO2 concentration (ppm)
    real :: e_a = 1.0           !< Ambient vapour pressure (Pa)
    real :: Q = 1.0             !< PPFD (umol/m^2/s)
    real :: g_bl = 1.0          !< Boundary layer conductance to H2O vapour (micromol m-2 PLA s-1)
    real :: g_sto_0 = 1.0       !< Closed stomata conductance (umol/m^2/s)
    real :: m = 1.0             !< Species-specific sensitivity to An (dimensionless)
    real :: V_cmax_25 = 1.0     !< Maximum catalytic rate at 25 degrees (umol/m^2/s)
    real :: J_max_25 = 1.0      !< Maximum rate of electron transport at 25 degrees (umol/m^2/s)
    real :: D_0 = 1.0           !< "The VPD at which g_sto is reduced by a factor of 2" (Pa) (Leuning et al. 1998)
    real :: O3 = 1.0
    real :: td = 1.0
    integer :: dd = 1
    integer :: hr = 1

    ! IN AND OUT
    real, dimension(366) :: fO3_h_1_hist
    real, dimension(366) :: fO3_d_hist
    real, dimension(366) :: daily_thermal_temperatures
    real :: O3up_acc_out

    ! OUTPUTS

    real :: gsto_final   !< Output: Raw photosynthesis-based stomatal conductance (umol m-2 s-1)
    real :: pngsto_An    !< Output: net CO2 assimilation (umol m-2 s-1)
    real :: pngsto_Ac
    real :: pngsto_Aj
    real :: pngsto_Ap
    real :: pngsto_R_d
    real :: O3up_out
    real :: fO3_h_out
    real :: fO3_d_out

    ! Set vars
    pgc%g_sto_0 = 20000.0
    pgc%m = 8.12
    pgc%v_cmax_25 = 180.0
    pgc%j_max_25 = 400.0

    season%growing_season_method = "constant"
    season%SGS = 118
    season%EGS = 210

    season%accumulation_period_method = "constant"
    season%Astart = 153
    season%Aend = 208

    ! season%height_method = "constant"
    ! season%height = 1.0

    ! season%LAI_method = "day PLF"
    season%LAI_a = 0.0
    season%LAI_b = 3.5
    season%LAI_c = 3.5
    season%LAI_d = 0.0
    season%LAI_1 = 21
    season%LAI_2 = 21

    season%SAI_method = "wheat"




  ! ================ FULL farquhar_photosynthesis_2 TEST ==================

    dd = 200

    call farquhar_photosynthesis_2(pgc, season, Tleaf_C, c_a, e_a, Q, g_bl, &
                                  g_sto_0, m, V_cmax_25, J_max_25, D_0, O3, td, dd, hr, &
                                  fO3_h_1_hist, fO3_d_hist, daily_thermal_temperatures, &
                                  gsto_final, pngsto_An, pngsto_Ac, &
                                  pngsto_Aj, pngsto_Ap, O3up_out, O3up_acc_out, &
                                  fO3_h_out, fO3_d_out, pngsto_R_d)

    @assertEqual(1.60806298, gsto_final, 'far_2-gsto_final')
    @assertEqual(-0.0709027424, pngsto_An, 'far_2-pngsto_An')
    @assertEqual(0, pngsto_Ac, 'far_2-pngsto_Ac')
    @assertEqual(0.0433349609, pngsto_Aj, 'far_2-pngsto_Aj')
    @assertEqual(0.0434980951, pngsto_Ap, 'far_2-pngsto_Ap')
    @assertEqual(0.0709027424, pngsto_R_d, 'far_2-pngsto_R_d')
    @assertEqual(1.49549854, O3up_out, 'far_2-O3up_out')
    @assertEqual(1.0, fO3_h_out, 'far_2-fO3_h_out')
    @assertEqual(0.0, fO3_d_out, 'far_2-fO3_d_out')




  end subroutine far_test

! module DO3SE_Photosynthesis_far_test
